//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Utilities/InputSystem/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""PlayerMKControls"",
            ""id"": ""c712e4fa-eb56-4f41-9886-91653028b79d"",
            ""actions"": [
                {
                    ""name"": ""Basic Move"",
                    ""type"": ""Value"",
                    ""id"": ""90ebcba7-778c-4f7c-a4f0-a9ba1736ea2a"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""41095767-93ad-4a9b-8e18-850a3c378bf1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""5f5b207f-8cf5-4d6a-81cc-90bc4d8f4f3e"",
                    ""path"": ""1DAxis(mode=1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Basic Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Negative"",
                    ""id"": ""bc424575-de8c-4109-b735-b8a171be92cf"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Basic Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Positive"",
                    ""id"": ""09f49f10-5723-4381-bdb7-5f98402e311a"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Basic Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrow Keys"",
                    ""id"": ""c6a2cd9a-74fe-4cb7-b46f-91ca9ce44ad0"",
                    ""path"": ""1DAxis(mode=1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Basic Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Negative"",
                    ""id"": ""d3732f4c-42fb-472c-abd1-3d461844e6ab"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Basic Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Positive"",
                    ""id"": ""52d32ac9-47a2-4f53-a56a-ee54947167a6"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Basic Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""579d5565-be06-4aca-ba39-dab2d3be84b9"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""734c3048-425d-4899-9f15-07ad15e01408"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerMKControls
        m_PlayerMKControls = asset.FindActionMap("PlayerMKControls", throwIfNotFound: true);
        m_PlayerMKControls_BasicMove = m_PlayerMKControls.FindAction("Basic Move", throwIfNotFound: true);
        m_PlayerMKControls_Pause = m_PlayerMKControls.FindAction("Pause", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerMKControls
    private readonly InputActionMap m_PlayerMKControls;
    private List<IPlayerMKControlsActions> m_PlayerMKControlsActionsCallbackInterfaces = new List<IPlayerMKControlsActions>();
    private readonly InputAction m_PlayerMKControls_BasicMove;
    private readonly InputAction m_PlayerMKControls_Pause;
    public struct PlayerMKControlsActions
    {
        private @PlayerControls m_Wrapper;
        public PlayerMKControlsActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @BasicMove => m_Wrapper.m_PlayerMKControls_BasicMove;
        public InputAction @Pause => m_Wrapper.m_PlayerMKControls_Pause;
        public InputActionMap Get() { return m_Wrapper.m_PlayerMKControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerMKControlsActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerMKControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerMKControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerMKControlsActionsCallbackInterfaces.Add(instance);
            @BasicMove.started += instance.OnBasicMove;
            @BasicMove.performed += instance.OnBasicMove;
            @BasicMove.canceled += instance.OnBasicMove;
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
        }

        private void UnregisterCallbacks(IPlayerMKControlsActions instance)
        {
            @BasicMove.started -= instance.OnBasicMove;
            @BasicMove.performed -= instance.OnBasicMove;
            @BasicMove.canceled -= instance.OnBasicMove;
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
        }

        public void RemoveCallbacks(IPlayerMKControlsActions instance)
        {
            if (m_Wrapper.m_PlayerMKControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerMKControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerMKControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerMKControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerMKControlsActions @PlayerMKControls => new PlayerMKControlsActions(this);
    public interface IPlayerMKControlsActions
    {
        void OnBasicMove(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
    }
}
